package br.com.caelum;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Properties;
import java.util.Set;

public class PropertyChecker {

	private Properties propertyFile;
	private List<File> sourceCodeFiles;
	private HashSet<PropertyNotUsed> errors;
	private FileUtils fileUtils;
	private String outputFile;

	public PropertyChecker(String propFile, String projectRoot, String outputFile) throws FileNotFoundException, IOException {
		
		fileUtils = new FileUtils(new String[] {"JAVA", "JSP", "TAG", "FTL"});

		this.outputFile = outputFile;
		propertyFile = new Properties();
		propertyFile.load(new FileInputStream(propFile));
		
		sourceCodeFiles = fileUtils.getFilesFrom(projectRoot);
		
		errors = new HashSet<PropertyNotUsed>();
		
	}

	public void execute() throws FileNotFoundException, IOException {
		
		Set<String> usedProps = new HashSet<String>();
		
		for(File file : sourceCodeFiles) {
			String content = fileUtils.readStream(new FileInputStream(file));
			
			for(Object k : propertyFile.keySet()) {
				String property = (String) k;
				
				if(usesTheProperty(content, property)) {
					usedProps.add(property);
				}
			}
		}
		
		checkForNonUsedProps(usedProps);
		output();		
	}

	private void output() throws FileNotFoundException, IOException {
		if(errors.isEmpty()) System.exit(0);
		
		System.out.println("There are " + errors.size() + " unused properties.");
		for(PropertyNotUsed error : errors) {
			System.out.println("Non-used property: " + error.getName());
		}
		
		if(outputFile!=null) save();
		System.exit(1);
	}

	private void checkForNonUsedProps(Set<String> usedProps) {
		
		Iterator<Object> it = propertyFile.keySet().iterator();
		
		while(it.hasNext()) {
			Object k = it.next();
			
			String property = (String) k;
			
			if(!usedProps.contains(property)) {
				errors.add(new PropertyNotUsed(property));
				it.remove();
			}
		}
	}

	private boolean usesTheProperty(String fileSource, String property) {
		return fileSource.contains("\"" + property + "\"") || 
				fileSource.contains("'" + property + "'");
	}

	private void save() throws FileNotFoundException, IOException {
		FileOutputStream out = new FileOutputStream(outputFile);
		propertyFile.store(out, "generated by the tool");
		out.flush();
		out.close();
	}


}
